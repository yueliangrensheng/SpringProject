<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:Jdbc.properties"/>
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="10"/>
        <property name="maxIdle" value="5"/>
    </bean>
    <!-- mapper配置 -->
    <!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 加载mybatis的全局配置文件   代理方式后所有的内容都通过spring容器来管理 ，这里就不再需要加载sqlMapConfig.xml -->
<!--        <property name="configLocation" value="classpath:SqlMapConfig.xml"/>-->
        <!-- 设置 sql 映射文件中的对象 别名  -->
        <property name="typeAliasesPackage" value="com.yazao.mybatis_spring.pojo"></property>
    </bean>

    <!--  mybatis整合spring DAO层开发之传统方式  -->
    <bean id="userDao" class="com.yazao.mybatis_spring.tradition.dao.impl.UserDaoImpl">

        <!--
           UserDaoImpl 的父类 SqlSessionDaoSupport 中定义的属性 需要 sqlSessionFactory 属性
        -->
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>


    <!--   mybatis整合spring DAO层开发之代理方式   -->
    <!--    用来生成 代理对象的工厂类 -->

    <!--  第一种方式：  缺点：只能给 一个接口产生代理对象，不符合实际开发，所以这种方式 生成代理对象 不可用   -->
    <!--    <bean class="org.mybatis.spring.mapper.MapperFactoryBean">-->
    <!--        &lt;!&ndash;-->
    <!--           MapperFactoryBean 的父类也是 SqlSessionDaoSupport 中定义的属性 需要 sqlSessionFactory 属性-->
    <!--        &ndash;&gt;-->
    <!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>-->
    <!--        &lt;!&ndash;-->
    <!--            指定给 哪一个接口 产生代理对象-->
    <!--            缺点：只能给 一个接口产生代理对象，不符合实际开发，所以这种方式 生成代理对象 不可用-->
    <!--         &ndash;&gt;-->
    <!--        <property name="mapperInterface" value="com.yazao.mybatis_spring.mapper.UserMapper"></property>-->
    <!--    </bean>-->

    <!--  第二种方式： 推荐  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--    代理对象的 包路径 扫描器     -->
        <property name="basePackage" value="com.yazao.mybatis_spring.mapper"></property>
    </bean>

</beans>