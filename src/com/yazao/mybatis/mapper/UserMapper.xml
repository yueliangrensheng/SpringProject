<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yazao.mybatis.mapper.UserMapper">
    <!--    id :  statementId
            parameterType : 输入映射的参数类型（即 传入的参数类型）

                            主要有：
                                基础数据类型（包括 基本类型以及包装类、 java.lang.String ）
                                POJO（即 javaBean）和 包装的POJO
                                Map

            returnType:  输出映射类型 （即 返回的数据类型）
                        主要有：
                             基础数据类型（包括 基本类型以及包装类、 java.lang.String ）
                             POJO（即 javaBean）和 包装的POJO
                             Map
                             List


                其中的
                    int 替代 java.lang.Integer
                    string 替代 java.lang.String


            #{}: 表示 占位符。 如果传入的是字符串，在预编译时会自动带上单引号
            ${}: 表示 链接符。 如果传入的是基本数据类型，辣么打括号中只能是value - -  ${value};
                如果传入的是POJO或者Map类型，辣么大括号中只能写 属性名 或者 key名 - - ${username}/${key}

      -->

    <!--    根据用户Id查找 用户信息 -->
    <!--  resultType 返回类型 使用的是 sqlMapperConfig.xml配置中的别名配置  -->
    <select id="findUserById" parameterType="int" resultType="user">
        select * from user where id = #{id}
    </select>

    <!--    根据用户Id查找 用户信息 -->
    <!--  resultType 返回类型 使用的是 sqlMapperConfig.xml配置中的别名配置  -->
    <select id="findUserById2" parameterType="int" resultType="map">
        select * from user where id = #{id}
    </select>

    <!--  查询用户数量  -->
    <select id="findUserCount" resultType="int">
        select count(*) from user
    </select>

    <!--    根据用户名 模糊查找 用户信息 -->
    <select id="findUserByUsername" parameterType="string" resultType="com.yazao.mybatis.pojo.User">
        <!--    '%#{username}%' 这样使用占位符的话，会导致报错， 这里应该使用链接符${value} -->
        select * from user where username like '%${value}%'
    </select>

    <!--    根据提供的信息 模糊查找 所有符合的用户信息 -->
    <select id="findUserByMap" parameterType="map" resultType="user">
        select * from user where username like '%${username}%' and sex =#{sex} and address=#{address}
    </select>

    <!--    根据提供的信息 模糊查找 所有符合的用户信息 -->
    <select id="findUserByQueryVo" parameterType="queryVo" resultType="user">
        select * from user where username like '%${user.username}%'
    </select>

    <!--    新增一个用户 -->
    <insert id="addUser" parameterType="com.yazao.mybatis.pojo.User">

        <selectKey keyProperty="id" order="AFTER" resultType="int">
            <!-- 返回当前事务最后产生的id值

            LAST_INSERT_ID() 自动返回最后一个 INSERT 或 UPDATE 查询中 AUTO_INCREMENT 列设置的第一个表发生的值。
            -->
            select LAST_INSERT_ID()
        </selectKey>
        insert into user(username,birthday,sex,address) value (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--  根据用户Id  更新用户信息 -->
    <update id="updateUserById" parameterType="com.yazao.mybatis.pojo.User">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        update user set username = #{username}, sex = #{sex}, birthday = #{birthday}, address = #{address} where id =
        #{id}
    </update>

    <!--   根据用户Id 删除用户信息 -->
    <delete id="deleteUserById" parameterType="int">
        delete from user where id = #{id}
    </delete>


    <!--

        resultMap 作用是： 手动配置  db的列名称  和 POJO的属性名称 相映射.

        resultMap 和 resultType 不可共存。只能有一个。

        如： Person类中的 user_name 和 gender 属性 分别对应 db中的 username 和 sex

        这样即使POJO中的属性名和DB中的字段名不一致，也可以 手动配置来映射。

     -->
    <resultMap id="findUserByPersonResultMap" type="person">
        <result property="user_name" column="username"></result>
        <result property="gender" column="sex"></result>
    </resultMap>

    <select id="findPersonById" parameterType="int" resultMap="findUserByPersonResultMap">
        select * from user where id=#{id}
    </select>


    <!--

        动态sql - if条件判断


        如果传入的映射参数 如果有 个别属性为 null 或者 '' ,辣么在查询条件时候，应当去除无效的条件判断。
     -->
    <select id="findListByUser" parameterType="user" resultType="user">

        select * from user

        <where>
            <!-- where：去除多余的 and/or -->

            <if test="username!=null and username != '' ">
                and username like '%${username}%'
            </if>

            <if test="sex != null and sex != '' ">
                and sex=#{sex}
            </if>

            <if test="address != null and address != '' ">
                and address=#{address}
            </if>

        </where>
    </select>
</mapper>